//
//  PCLocoMojo.m
//  LocoMojo
//
//  Created by Richard Lichkus on 8/12/14.
//  Copyright (c) 2014 CleverKnot LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PCLocoMojo.h"


@implementation PCLocoMojo

#pragma mark Cache

static UIColor* _loginBlueColor2 = nil;
static UIColor* _loginBlueColor = nil;
static UIColor* _messageGradientColor = nil;
static UIColor* _messageGradientColor2 = nil;
static UIColor* _messageAwayGradientColor = nil;
static UIColor* _messageAwayGradientColor2 = nil;

static PCGradient* _loginBlue = nil;
static PCGradient* _messageGradient = nil;
static PCGradient* _messageAwayGradient = nil;

static UIImage* _imageOfLoginDisabled = nil;
static UIImage* _imageOfLoginNormal = nil;
static UIImage* _imageOfLoginTwitter = nil;
static UIImage* _imageOfFacebookLogin = nil;
static UIImage* _imageOfMessage = nil;
static UIImage* _imageOfSend = nil;
static UIImage* _imageOfPinIcon = nil;
static UIImage* _imageOfCanvas2 = nil;
static UIImage* _imageOfCircle = nil;
static UIImage* _imageOfAvatar = nil;
static UIImage* _imageOfAdd = nil;
static UIImage* _imageOfPin = nil;
static UIImage* _imageOfChat = nil;
static UIImage* _imageOfTable = nil;
static UIImage* _imageOfMessageBubble = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _loginBlueColor2 = [UIColor colorWithRed: 0.05 green: 0 blue: 1 alpha: 1];
    _loginBlueColor = [UIColor colorWithRed: 0 green: 0.527 blue: 1 alpha: 1];
    _messageGradientColor = [UIColor colorWithRed: 0.227 green: 0.316 blue: 0.971 alpha: 1];
    _messageGradientColor2 = [UIColor colorWithRed: 0.356 green: 0.518 blue: 0.995 alpha: 1];
    _messageAwayGradientColor = [UIColor colorWithRed: 0.074 green: 0.799 blue: 0.046 alpha: 1];
    _messageAwayGradientColor2 = [UIColor colorWithRed: 0.181 green: 1 blue: 0.16 alpha: 1];

    // Gradients Initialization
    CGFloat loginBlueLocations[] = {0, 0.46, 1};
    _loginBlue = [PCGradient gradientWithColors: @[PCLocoMojo.loginBlueColor, [UIColor colorWithRed: 0.025 green: 0.264 blue: 1 alpha: 1], PCLocoMojo.loginBlueColor2] locations: loginBlueLocations];
    CGFloat messageGradientLocations[] = {0, 1};
    _messageGradient = [PCGradient gradientWithColors: @[PCLocoMojo.messageGradientColor2, PCLocoMojo.messageGradientColor] locations: messageGradientLocations];
    CGFloat messageAwayGradientLocations[] = {0, 1};
    _messageAwayGradient = [PCGradient gradientWithColors: @[PCLocoMojo.messageAwayGradientColor2, PCLocoMojo.messageAwayGradientColor] locations: messageAwayGradientLocations];

}

#pragma mark Colors

+ (UIColor*)loginBlueColor2 { return _loginBlueColor2; }
+ (UIColor*)loginBlueColor { return _loginBlueColor; }
+ (UIColor*)messageGradientColor { return _messageGradientColor; }
+ (UIColor*)messageGradientColor2 { return _messageGradientColor2; }
+ (UIColor*)messageAwayGradientColor { return _messageAwayGradientColor; }
+ (UIColor*)messageAwayGradientColor2 { return _messageAwayGradientColor2; }

#pragma mark Gradients

+ (PCGradient*)loginBlue { return _loginBlue; }
+ (PCGradient*)messageGradient { return _messageGradient; }
+ (PCGradient*)messageAwayGradient { return _messageAwayGradient; }

#pragma mark Drawing Methods

+ (void)drawLoginDisabled;
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [UIColor.grayColor setFill];
    [rectanglePath fill];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(206, 4, 1, 1)];
    [UIColor.grayColor setFill];
    [ovalPath fill];
}

+ (void)drawLoginNormal;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Login Enabled Drawing
    UIBezierPath* loginEnabledPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    CGContextSaveGState(context);
    [loginEnabledPath addClip];
    CGContextDrawLinearGradient(context, PCLocoMojo.loginBlue.CGGradient, CGPointMake(120, -0), CGPointMake(120, 40), 0);
    CGContextRestoreGState(context);
}

+ (void)drawLoginTwitter;
{
    //// Color Declarations
    UIColor* twitter = [UIColor colorWithRed: 0.012 green: 0.675 blue: 0.933 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [twitter setFill];
    [rectanglePath fill];
}

+ (void)drawFacebookLogin;
{
    //// Color Declarations
    UIColor* facebook = [UIColor colorWithRed: 0.231 green: 0.349 blue: 0.596 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [facebook setFill];
    [rectanglePath fill];
}

+ (void)drawCurrentLocationWithIsSelected: (BOOL)isSelected;
{
    //// Color Declarations
    UIColor* noFill = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];
    UIColor* semiWhite = [UIColor colorWithRed: 0.114 green: 0.288 blue: 1 alpha: 0.5];

    //// Variable Declarations
    UIColor* locationFill = isSelected ? semiWhite : noFill;

    //// Polygon Drawing
    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(34, 6)];
    [polygonPath addLineToPoint: CGPointMake(25, 35)];
    [polygonPath addLineToPoint: CGPointMake(20, 22)];
    [polygonPath addLineToPoint: CGPointMake(5, 21)];
    [polygonPath addLineToPoint: CGPointMake(34, 6)];
    [polygonPath closePath];
    [locationFill setFill];
    [polygonPath fill];
    [semiWhite setStroke];
    polygonPath.lineWidth = 3;
    [polygonPath stroke];
}

+ (void)drawMessage;
{

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(31.68, 11.08)];
    [bezier2Path addCurveToPoint: CGPointMake(31.68, 25.92) controlPoint1: CGPointMake(37.35, 15.18) controlPoint2: CGPointMake(37.35, 21.82)];
    [bezier2Path addCurveToPoint: CGPointMake(15.18, 27.98) controlPoint1: CGPointMake(27.22, 29.16) controlPoint2: CGPointMake(20.57, 29.84)];
    [bezier2Path addLineToPoint: CGPointMake(6.71, 32.91)];
    [bezier2Path addCurveToPoint: CGPointMake(5, 33.91) controlPoint1: CGPointMake(6.68, 32.93) controlPoint2: CGPointMake(5, 33.91)];
    [bezier2Path addLineToPoint: CGPointMake(6, 32.24)];
    [bezier2Path addCurveToPoint: CGPointMake(10.24, 25.18) controlPoint1: CGPointMake(6.02, 32.21) controlPoint2: CGPointMake(10.24, 25.18)];
    [bezier2Path addCurveToPoint: CGPointMake(11.18, 11.08) controlPoint1: CGPointMake(5.54, 21.05) controlPoint2: CGPointMake(5.85, 14.94)];
    [bezier2Path addCurveToPoint: CGPointMake(31.68, 11.08) controlPoint1: CGPointMake(16.84, 6.97) controlPoint2: CGPointMake(26.02, 6.97)];
    [bezier2Path closePath];
    [UIColor.darkGrayColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(12.5, 16.5, 4, 4)];
    [UIColor.darkGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(19.5, 16.5, 4, 4)];
    [UIColor.darkGrayColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(26, 16.5, 4, 4)];
    [UIColor.darkGrayColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];
}

+ (void)drawSend;
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(5.5, 19.5)];
    [bezierPath addLineToPoint: CGPointMake(17, 32)];
    [bezierPath addLineToPoint: CGPointMake(35.5, 5.5)];
    bezierPath.lineCapStyle = kCGLineCapSquare;

    [UIColor.darkGrayColor setStroke];
    bezierPath.lineWidth = 1.5;
    [bezierPath stroke];
}

+ (void)drawCanvas1;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color7 = [UIColor colorWithRed: 0.341 green: 0.341 blue: 0.341 alpha: 1];

    //// Shadow Declarations
    UIColor* shadow = [UIColor.blackColor colorWithAlphaComponent: 0.25];
    CGSize shadowOffset = CGSizeMake(-3.1, -4.1);
    CGFloat shadowBlurRadius = 3;
    UIColor* shadow3 = UIColor.darkGrayColor;
    CGSize shadow3Offset = CGSizeMake(-1.1, -2.1);
    CGFloat shadow3BlurRadius = 3;

    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(29.5, 54.5, 2, 1)];
    [color7 setFill];
    [oval3Path fill];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(32.5, 36)];
    [bezierPath addCurveToPoint: CGPointMake(31.5, 55) controlPoint1: CGPointMake(32.5, 36) controlPoint2: CGPointMake(31.5, 55)];
    [bezierPath addLineToPoint: CGPointMake(29.5, 55)];
    [bezierPath addLineToPoint: CGPointMake(27.5, 36)];
    [bezierPath addCurveToPoint: CGPointMake(28.23, 36.96) controlPoint1: CGPointMake(27.5, 36.35) controlPoint2: CGPointMake(27.74, 36.69)];
    [bezierPath addCurveToPoint: CGPointMake(31.77, 36.96) controlPoint1: CGPointMake(29.21, 37.49) controlPoint2: CGPointMake(30.79, 37.49)];
    [bezierPath addCurveToPoint: CGPointMake(32.5, 36) controlPoint1: CGPointMake(32.26, 36.69) controlPoint2: CGPointMake(32.5, 36.35)];
    [bezierPath addLineToPoint: CGPointMake(32.5, 36)];
    [bezierPath closePath];
    [UIColor.grayColor setFill];
    [bezierPath fill];

    ////// Bezier Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(bezierPath.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [bezierPath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);



    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 30, 20.5);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-18, -17.5, 36, 35)];
    [UIColor.grayColor setFill];
    [ovalPath fill];

    ////// Oval Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(ovalPath.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [ovalPath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);


    CGContextRestoreGState(context);
}

+ (void)drawPinIcon;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* gradientColor = [UIColor colorWithRed: 0.966 green: 1 blue: 0.977 alpha: 1];
    UIColor* color7 = [UIColor colorWithRed: 0.341 green: 0.341 blue: 0.341 alpha: 1];
    UIColor* messagePin = [UIColor colorWithRed: 0.188 green: 0.37 blue: 0.891 alpha: 1];

    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 0.75, 1};
    PCGradient* gradient = [PCGradient gradientWithColors: @[gradientColor, [UIColor colorWithRed: 0.483 green: 0.764 blue: 0.988 alpha: 1], PCLocoMojo.loginBlueColor] locations: gradientLocations];

    //// Shadow Declarations
    UIColor* shadow = [UIColor.blackColor colorWithAlphaComponent: 0.25];
    CGSize shadowOffset = CGSizeMake(-3.1, -4.1);
    CGFloat shadowBlurRadius = 3;
    UIColor* shadow3 = UIColor.darkGrayColor;
    CGSize shadow3Offset = CGSizeMake(-1.1, -2.1);
    CGFloat shadow3BlurRadius = 3;
    UIColor* shadow4 = UIColor.grayColor;
    CGSize shadow4Offset = CGSizeMake(-2.1, -2.1);
    CGFloat shadow4BlurRadius = 5;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 60, 60)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, gradient.CGGradient, CGPointMake(30, -0), CGPointMake(30, 60), 0);
    CGContextRestoreGState(context);


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(29.5, 54.5, 2, 1)];
    [color7 setFill];
    [oval3Path fill];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(32.5, 36)];
    [bezierPath addCurveToPoint: CGPointMake(31.5, 55) controlPoint1: CGPointMake(32.5, 36) controlPoint2: CGPointMake(31.5, 55)];
    [bezierPath addLineToPoint: CGPointMake(29.5, 55)];
    [bezierPath addLineToPoint: CGPointMake(27.5, 36)];
    [bezierPath addCurveToPoint: CGPointMake(28.23, 36.96) controlPoint1: CGPointMake(27.5, 36.35) controlPoint2: CGPointMake(27.74, 36.69)];
    [bezierPath addCurveToPoint: CGPointMake(31.77, 36.96) controlPoint1: CGPointMake(29.21, 37.49) controlPoint2: CGPointMake(30.79, 37.49)];
    [bezierPath addCurveToPoint: CGPointMake(32.5, 36) controlPoint1: CGPointMake(32.26, 36.69) controlPoint2: CGPointMake(32.5, 36.35)];
    [bezierPath addLineToPoint: CGPointMake(32.5, 36)];
    [bezierPath closePath];
    [UIColor.grayColor setFill];
    [bezierPath fill];

    ////// Bezier Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(bezierPath.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [bezierPath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);



    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 30, 20.5);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-18, -17.5, 36, 35)];
    [messagePin setFill];
    [ovalPath fill];

    ////// Oval Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(ovalPath.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [ovalPath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);


    CGContextRestoreGState(context);


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [color7 setFill];
    [bezier2Path fill];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [UIColor.grayColor setFill];
    [bezier3Path fill];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = UIBezierPath.bezierPath;
    [bezier5Path moveToPoint: CGPointMake(38.13, 12.34)];
    [bezier5Path addCurveToPoint: CGPointMake(38.13, 23.66) controlPoint1: CGPointMake(42.62, 15.47) controlPoint2: CGPointMake(42.62, 20.53)];
    [bezier5Path addCurveToPoint: CGPointMake(31.97, 25.88) controlPoint1: CGPointMake(36.39, 24.87) controlPoint2: CGPointMake(34.22, 25.61)];
    [bezier5Path addCurveToPoint: CGPointMake(27.67, 29.86) controlPoint1: CGPointMake(30.12, 27.59) controlPoint2: CGPointMake(27.67, 29.86)];
    [bezier5Path addCurveToPoint: CGPointMake(27.69, 25.84) controlPoint1: CGPointMake(27.67, 29.86) controlPoint2: CGPointMake(27.68, 27.89)];
    [bezier5Path addCurveToPoint: CGPointMake(21.87, 23.66) controlPoint1: CGPointMake(25.55, 25.53) controlPoint2: CGPointMake(23.52, 24.81)];
    [bezier5Path addCurveToPoint: CGPointMake(21.87, 12.34) controlPoint1: CGPointMake(17.38, 20.53) controlPoint2: CGPointMake(17.38, 15.47)];
    [bezier5Path addCurveToPoint: CGPointMake(38.13, 12.34) controlPoint1: CGPointMake(26.36, 9.22) controlPoint2: CGPointMake(33.64, 9.22)];
    [bezier5Path closePath];
    [UIColor.lightGrayColor setFill];
    [bezier5Path fill];

    ////// Bezier 5 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(bezier5Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow4 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow4 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow4Offset, shadow4BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [bezier5Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.whiteColor setStroke];
    bezier5Path.lineWidth = 1;
    [bezier5Path stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(22, 15.5, 4, 4)];
    [UIColor.lightGrayColor setFill];
    [oval2Path fill];
    [UIColor.whiteColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Oval 4 Drawing
    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(28, 15.5, 4, 4)];
    [UIColor.lightGrayColor setFill];
    [oval4Path fill];
    [UIColor.whiteColor setStroke];
    oval4Path.lineWidth = 1;
    [oval4Path stroke];


    //// Oval 5 Drawing
    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(34, 15.5, 4, 4)];
    [UIColor.lightGrayColor setFill];
    [oval5Path fill];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];
}

+ (void)drawCanvas2;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* gradientColor = [UIColor colorWithRed: 0.966 green: 1 blue: 0.977 alpha: 1];
    UIColor* color7 = [UIColor colorWithRed: 0.341 green: 0.341 blue: 0.341 alpha: 1];
    UIColor* messagePin = [UIColor colorWithRed: 0.188 green: 0.37 blue: 0.891 alpha: 1];

    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 0.75, 1};
    PCGradient* gradient = [PCGradient gradientWithColors: @[gradientColor, [UIColor colorWithRed: 0.483 green: 0.764 blue: 0.988 alpha: 1], PCLocoMojo.loginBlueColor] locations: gradientLocations];

    //// Shadow Declarations
    UIColor* shadow = [UIColor.blackColor colorWithAlphaComponent: 0.25];
    CGSize shadowOffset = CGSizeMake(-3.1, -4.1);
    CGFloat shadowBlurRadius = 3;
    UIColor* shadow3 = UIColor.darkGrayColor;
    CGSize shadow3Offset = CGSizeMake(-1.1, -2.1);
    CGFloat shadow3BlurRadius = 3;
    UIColor* shadow4 = UIColor.grayColor;
    CGSize shadow4Offset = CGSizeMake(-2.1, -2.1);
    CGFloat shadow4BlurRadius = 5;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 60, 60) cornerRadius: 4];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, gradient.CGGradient, CGPointMake(30, -0), CGPointMake(30, 60), 0);
    CGContextRestoreGState(context);


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(29.5, 54.5, 2, 1)];
    [color7 setFill];
    [oval3Path fill];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(32.5, 36)];
    [bezierPath addCurveToPoint: CGPointMake(31.5, 55) controlPoint1: CGPointMake(32.5, 36) controlPoint2: CGPointMake(31.5, 55)];
    [bezierPath addLineToPoint: CGPointMake(29.5, 55)];
    [bezierPath addLineToPoint: CGPointMake(27.5, 36)];
    [bezierPath addCurveToPoint: CGPointMake(28.23, 36.96) controlPoint1: CGPointMake(27.5, 36.35) controlPoint2: CGPointMake(27.74, 36.69)];
    [bezierPath addCurveToPoint: CGPointMake(31.77, 36.96) controlPoint1: CGPointMake(29.21, 37.49) controlPoint2: CGPointMake(30.79, 37.49)];
    [bezierPath addCurveToPoint: CGPointMake(32.5, 36) controlPoint1: CGPointMake(32.26, 36.69) controlPoint2: CGPointMake(32.5, 36.35)];
    [bezierPath addLineToPoint: CGPointMake(32.5, 36)];
    [bezierPath closePath];
    [UIColor.grayColor setFill];
    [bezierPath fill];

    ////// Bezier Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(bezierPath.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [bezierPath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);



    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 30, 20.5);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-18, -17.5, 36, 35)];
    [messagePin setFill];
    [ovalPath fill];

    ////// Oval Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(ovalPath.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [ovalPath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);


    CGContextRestoreGState(context);


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [color7 setFill];
    [bezier2Path fill];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [UIColor.grayColor setFill];
    [bezier3Path fill];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = UIBezierPath.bezierPath;
    [bezier5Path moveToPoint: CGPointMake(38.13, 12.34)];
    [bezier5Path addCurveToPoint: CGPointMake(38.13, 23.66) controlPoint1: CGPointMake(42.62, 15.47) controlPoint2: CGPointMake(42.62, 20.53)];
    [bezier5Path addCurveToPoint: CGPointMake(31.97, 25.88) controlPoint1: CGPointMake(36.39, 24.87) controlPoint2: CGPointMake(34.22, 25.61)];
    [bezier5Path addCurveToPoint: CGPointMake(27.67, 29.86) controlPoint1: CGPointMake(30.12, 27.59) controlPoint2: CGPointMake(27.67, 29.86)];
    [bezier5Path addCurveToPoint: CGPointMake(27.69, 25.84) controlPoint1: CGPointMake(27.67, 29.86) controlPoint2: CGPointMake(27.68, 27.89)];
    [bezier5Path addCurveToPoint: CGPointMake(21.87, 23.66) controlPoint1: CGPointMake(25.55, 25.53) controlPoint2: CGPointMake(23.52, 24.81)];
    [bezier5Path addCurveToPoint: CGPointMake(21.87, 12.34) controlPoint1: CGPointMake(17.38, 20.53) controlPoint2: CGPointMake(17.38, 15.47)];
    [bezier5Path addCurveToPoint: CGPointMake(38.13, 12.34) controlPoint1: CGPointMake(26.36, 9.22) controlPoint2: CGPointMake(33.64, 9.22)];
    [bezier5Path closePath];
    [UIColor.lightGrayColor setFill];
    [bezier5Path fill];

    ////// Bezier 5 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(bezier5Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow4 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow4 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow4Offset, shadow4BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [bezier5Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.whiteColor setStroke];
    bezier5Path.lineWidth = 1;
    [bezier5Path stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(22, 15.5, 4, 4)];
    [UIColor.lightGrayColor setFill];
    [oval2Path fill];
    [UIColor.whiteColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Oval 4 Drawing
    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(28, 15.5, 4, 4)];
    [UIColor.lightGrayColor setFill];
    [oval4Path fill];
    [UIColor.whiteColor setStroke];
    oval4Path.lineWidth = 1;
    [oval4Path stroke];


    //// Oval 5 Drawing
    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(34, 15.5, 4, 4)];
    [UIColor.lightGrayColor setFill];
    [oval5Path fill];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];
}

+ (void)drawCanvas3;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Image Declarations
    UIImage* appIcon60x60 = [UIImage imageNamed: @"appIcon60x60"];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 60, 60) cornerRadius: 4];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(0, -9, appIcon60x60.size.width, appIcon60x60.size.height), appIcon60x60.CGImage);
    CGContextRestoreGState(context);
}

+ (void)drawCanvas4;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* gradientColor = [UIColor colorWithRed: 0.966 green: 1 blue: 0.977 alpha: 1];
    UIColor* messagePin = [UIColor colorWithRed: 0.188 green: 0.37 blue: 0.891 alpha: 1];
    UIColor* color17 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color18 = [UIColor colorWithRed: 0.18 green: 0.952 blue: 0.342 alpha: 1];
    UIColor* gradient3Color = [UIColor colorWithRed: 0.385 green: 0.87 blue: 1 alpha: 1];

    //// Gradient Declarations
    CGFloat gradient3Locations[] = {0.01, 0.01, 1};
    PCGradient* gradient3 = [PCGradient gradientWithColors: @[gradient3Color, [UIColor colorWithRed: 0.385 green: 0.87 blue: 1 alpha: 1], gradient3Color] locations: gradient3Locations];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 60, 60) cornerRadius: 4];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, gradient3.CGGradient, CGPointMake(30, -0), CGPointMake(30, 60), 0);
    CGContextRestoreGState(context);


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(52.67, 10.31)];
    [bezier3Path addCurveToPoint: CGPointMake(52.67, 28.69) controlPoint1: CGPointMake(59.11, 15.38) controlPoint2: CGPointMake(59.11, 23.62)];
    [bezier3Path addLineToPoint: CGPointMake(52.51, 28.82)];
    [bezier3Path addCurveToPoint: CGPointMake(48.5, 39.5) controlPoint1: CGPointMake(50.76, 33.47) controlPoint2: CGPointMake(48.5, 39.5)];
    [bezier3Path addCurveToPoint: CGPointMake(47.36, 31.5) controlPoint1: CGPointMake(48.5, 39.5) controlPoint2: CGPointMake(47.9, 35.3)];
    [bezier3Path addCurveToPoint: CGPointMake(29.33, 28.69) controlPoint1: CGPointMake(41.37, 33.47) controlPoint2: CGPointMake(34.21, 32.53)];
    [bezier3Path addCurveToPoint: CGPointMake(29.33, 10.31) controlPoint1: CGPointMake(22.89, 23.62) controlPoint2: CGPointMake(22.89, 15.38)];
    [bezier3Path addCurveToPoint: CGPointMake(52.67, 10.31) controlPoint1: CGPointMake(35.78, 5.23) controlPoint2: CGPointMake(46.22, 5.23)];
    [bezier3Path closePath];
    [color18 setFill];
    [bezier3Path fill];
    [gradientColor setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(31.67, 21.31)];
    [bezier2Path addCurveToPoint: CGPointMake(31.67, 39.69) controlPoint1: CGPointMake(38.11, 26.38) controlPoint2: CGPointMake(38.11, 34.62)];
    [bezier2Path addCurveToPoint: CGPointMake(16.5, 43.21) controlPoint1: CGPointMake(27.55, 42.94) controlPoint2: CGPointMake(21.8, 44.11)];
    [bezier2Path addCurveToPoint: CGPointMake(16.5, 51.5) controlPoint1: CGPointMake(16.5, 46.46) controlPoint2: CGPointMake(16.5, 51.5)];
    [bezier2Path addCurveToPoint: CGPointMake(11.15, 41.48) controlPoint1: CGPointMake(16.5, 51.5) controlPoint2: CGPointMake(13.48, 45.84)];
    [bezier2Path addCurveToPoint: CGPointMake(8.33, 39.69) controlPoint1: CGPointMake(10.15, 40.98) controlPoint2: CGPointMake(9.21, 40.38)];
    [bezier2Path addCurveToPoint: CGPointMake(8.33, 21.31) controlPoint1: CGPointMake(1.89, 34.62) controlPoint2: CGPointMake(1.89, 26.38)];
    [bezier2Path addCurveToPoint: CGPointMake(31.67, 21.31) controlPoint1: CGPointMake(14.78, 16.23) controlPoint2: CGPointMake(25.22, 16.23)];
    [bezier2Path closePath];
    [messagePin setFill];
    [bezier2Path fill];
    [gradientColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [UIColor.lightGrayColor setFill];
    [bezierPath fill];
    [UIColor.grayColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Polygon Drawing
    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(40.25, 21.25)];
    [polygonPath addLineToPoint: CGPointMake(48.25, 14.25)];
    [polygonPath addLineToPoint: CGPointMake(49.5, 15.5)];
    [polygonPath addLineToPoint: CGPointMake(40.25, 25.25)];
    [polygonPath addLineToPoint: CGPointMake(35.5, 19)];
    [polygonPath addLineToPoint: CGPointMake(37.75, 17.75)];
    [polygonPath addLineToPoint: CGPointMake(40.25, 21.25)];
    [polygonPath closePath];
    [color17 setFill];
    [polygonPath fill];


    //// Polygon 2 Drawing
    UIBezierPath* polygon2Path = UIBezierPath.bezierPath;
    [polygon2Path moveToPoint: CGPointMake(19, 23)];
    [polygon2Path addCurveToPoint: CGPointMake(23.5, 26.5) controlPoint1: CGPointMake(21.38, 23.12) controlPoint2: CGPointMake(23.25, 24.25)];
    [polygon2Path addCurveToPoint: CGPointMake(20, 32) controlPoint1: CGPointMake(23.75, 28.75) controlPoint2: CGPointMake(20, 32)];
    [polygon2Path addLineToPoint: CGPointMake(20, 35)];
    [polygon2Path addLineToPoint: CGPointMake(18.5, 34.5)];
    [polygon2Path addLineToPoint: CGPointMake(18, 31)];
    [polygon2Path addCurveToPoint: CGPointMake(21.5, 27.5) controlPoint1: CGPointMake(18, 31) controlPoint2: CGPointMake(21.25, 29)];
    [polygon2Path addCurveToPoint: CGPointMake(19, 25) controlPoint1: CGPointMake(21.75, 26) controlPoint2: CGPointMake(20.62, 25.12)];
    [polygon2Path addCurveToPoint: CGPointMake(15, 27) controlPoint1: CGPointMake(17.38, 24.88) controlPoint2: CGPointMake(15, 27)];
    [polygon2Path addLineToPoint: CGPointMake(14, 26)];
    [polygon2Path addCurveToPoint: CGPointMake(19, 23) controlPoint1: CGPointMake(14, 26) controlPoint2: CGPointMake(16.62, 22.88)];
    [polygon2Path closePath];
    polygon2Path.lineJoinStyle = kCGLineJoinRound;

    [UIColor.whiteColor setFill];
    [polygon2Path fill];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
    [bezier4Path moveToPoint: CGPointMake(18.51, 38.22)];
    [bezier4Path addCurveToPoint: CGPointMake(20.5, 38.22) controlPoint1: CGPointMake(18.67, 39.93) controlPoint2: CGPointMake(20.34, 39.93)];
    [bezier4Path addCurveToPoint: CGPointMake(18.51, 38.22) controlPoint1: CGPointMake(20.67, 36.51) controlPoint2: CGPointMake(18.34, 36.51)];
    [bezier4Path closePath];
    [gradientColor setFill];
    [bezier4Path fill];
}

+ (void)drawCanvas5;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* gradientColor = [UIColor colorWithRed: 0.966 green: 1 blue: 0.977 alpha: 1];
    UIColor* messagePin = [UIColor colorWithRed: 0.188 green: 0.37 blue: 0.891 alpha: 1];
    UIColor* color17 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color18 = [UIColor colorWithRed: 0.18 green: 0.952 blue: 0.342 alpha: 1];
    UIColor* gradient3Color = [UIColor colorWithRed: 0.385 green: 0.87 blue: 1 alpha: 1];

    //// Gradient Declarations
    CGFloat gradient3Locations[] = {0.01, 0.01, 1};
    PCGradient* gradient3 = [PCGradient gradientWithColors: @[gradient3Color, [UIColor colorWithRed: 0.385 green: 0.87 blue: 1 alpha: 1], gradient3Color] locations: gradient3Locations];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 60, 60)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, gradient3.CGGradient, CGPointMake(30, -0), CGPointMake(30, 60), 0);
    CGContextRestoreGState(context);


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(52.67, 10.31)];
    [bezier3Path addCurveToPoint: CGPointMake(52.67, 28.69) controlPoint1: CGPointMake(59.11, 15.38) controlPoint2: CGPointMake(59.11, 23.62)];
    [bezier3Path addLineToPoint: CGPointMake(52.51, 28.82)];
    [bezier3Path addCurveToPoint: CGPointMake(48.5, 39.5) controlPoint1: CGPointMake(50.76, 33.47) controlPoint2: CGPointMake(48.5, 39.5)];
    [bezier3Path addCurveToPoint: CGPointMake(47.36, 31.5) controlPoint1: CGPointMake(48.5, 39.5) controlPoint2: CGPointMake(47.9, 35.3)];
    [bezier3Path addCurveToPoint: CGPointMake(29.33, 28.69) controlPoint1: CGPointMake(41.37, 33.47) controlPoint2: CGPointMake(34.21, 32.53)];
    [bezier3Path addCurveToPoint: CGPointMake(29.33, 10.31) controlPoint1: CGPointMake(22.89, 23.62) controlPoint2: CGPointMake(22.89, 15.38)];
    [bezier3Path addCurveToPoint: CGPointMake(52.67, 10.31) controlPoint1: CGPointMake(35.78, 5.23) controlPoint2: CGPointMake(46.22, 5.23)];
    [bezier3Path closePath];
    [color18 setFill];
    [bezier3Path fill];
    [gradientColor setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(31.67, 21.31)];
    [bezier2Path addCurveToPoint: CGPointMake(31.67, 39.69) controlPoint1: CGPointMake(38.11, 26.38) controlPoint2: CGPointMake(38.11, 34.62)];
    [bezier2Path addCurveToPoint: CGPointMake(16.5, 43.21) controlPoint1: CGPointMake(27.55, 42.94) controlPoint2: CGPointMake(21.8, 44.11)];
    [bezier2Path addCurveToPoint: CGPointMake(16.5, 51.5) controlPoint1: CGPointMake(16.5, 46.46) controlPoint2: CGPointMake(16.5, 51.5)];
    [bezier2Path addCurveToPoint: CGPointMake(11.15, 41.48) controlPoint1: CGPointMake(16.5, 51.5) controlPoint2: CGPointMake(13.48, 45.84)];
    [bezier2Path addCurveToPoint: CGPointMake(8.33, 39.69) controlPoint1: CGPointMake(10.15, 40.98) controlPoint2: CGPointMake(9.21, 40.38)];
    [bezier2Path addCurveToPoint: CGPointMake(8.33, 21.31) controlPoint1: CGPointMake(1.89, 34.62) controlPoint2: CGPointMake(1.89, 26.38)];
    [bezier2Path addCurveToPoint: CGPointMake(31.67, 21.31) controlPoint1: CGPointMake(14.78, 16.23) controlPoint2: CGPointMake(25.22, 16.23)];
    [bezier2Path closePath];
    [messagePin setFill];
    [bezier2Path fill];
    [gradientColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [UIColor.lightGrayColor setFill];
    [bezierPath fill];
    [UIColor.grayColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Polygon Drawing
    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(40.25, 21.25)];
    [polygonPath addLineToPoint: CGPointMake(48.25, 14.25)];
    [polygonPath addLineToPoint: CGPointMake(49.5, 15.5)];
    [polygonPath addLineToPoint: CGPointMake(40.25, 25.25)];
    [polygonPath addLineToPoint: CGPointMake(35.5, 19)];
    [polygonPath addLineToPoint: CGPointMake(37.75, 17.75)];
    [polygonPath addLineToPoint: CGPointMake(40.25, 21.25)];
    [polygonPath closePath];
    [color17 setFill];
    [polygonPath fill];


    //// Polygon 2 Drawing
    UIBezierPath* polygon2Path = UIBezierPath.bezierPath;
    [polygon2Path moveToPoint: CGPointMake(19, 23)];
    [polygon2Path addCurveToPoint: CGPointMake(23.5, 26.5) controlPoint1: CGPointMake(21.38, 23.13) controlPoint2: CGPointMake(23.25, 24.25)];
    [polygon2Path addCurveToPoint: CGPointMake(20, 32) controlPoint1: CGPointMake(23.75, 28.75) controlPoint2: CGPointMake(20, 32)];
    [polygon2Path addLineToPoint: CGPointMake(20, 35)];
    [polygon2Path addLineToPoint: CGPointMake(18.5, 34.5)];
    [polygon2Path addLineToPoint: CGPointMake(18, 31)];
    [polygon2Path addCurveToPoint: CGPointMake(21.5, 27.5) controlPoint1: CGPointMake(18, 31) controlPoint2: CGPointMake(21.25, 29)];
    [polygon2Path addCurveToPoint: CGPointMake(19, 25) controlPoint1: CGPointMake(21.75, 26) controlPoint2: CGPointMake(20.62, 25.13)];
    [polygon2Path addCurveToPoint: CGPointMake(15, 27) controlPoint1: CGPointMake(17.38, 24.88) controlPoint2: CGPointMake(15, 27)];
    [polygon2Path addLineToPoint: CGPointMake(14, 26)];
    [polygon2Path addCurveToPoint: CGPointMake(19, 23) controlPoint1: CGPointMake(14, 26) controlPoint2: CGPointMake(16.62, 22.88)];
    [polygon2Path closePath];
    polygon2Path.lineJoinStyle = kCGLineJoinRound;

    [UIColor.whiteColor setFill];
    [polygon2Path fill];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
    [bezier4Path moveToPoint: CGPointMake(18.51, 38.22)];
    [bezier4Path addCurveToPoint: CGPointMake(20.5, 38.22) controlPoint1: CGPointMake(18.67, 39.93) controlPoint2: CGPointMake(20.34, 39.93)];
    [bezier4Path addCurveToPoint: CGPointMake(18.51, 38.22) controlPoint1: CGPointMake(20.67, 36.51) controlPoint2: CGPointMake(18.34, 36.51)];
    [bezier4Path closePath];
    [gradientColor setFill];
    [bezier4Path fill];
}

+ (void)drawCircle;
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30, 30)];
    [UIColor.grayColor setFill];
    [ovalPath fill];
}

+ (void)drawAvatar;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 22);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-9, -7.5, 18, 15) byRoundingCorners: UIRectCornerTopLeft | UIRectCornerTopRight cornerRadii: CGSizeMake(7, 7)];
    [rectanglePath closePath];
    [UIColor.darkGrayColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 6.5);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6, -6, 12, 12)];
    [UIColor.darkGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawAdd;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(-0.75, -15, 1.5, 30)];
    [UIColor.darkGrayColor setFill];
    [rectanglePath fill];

    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(-0.75, -15, 1.5, 30)];
    [UIColor.darkGrayColor setFill];
    [rectangle2Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawPin;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 12.75, 6);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-4.75, -4.5, 9.5, 9)];
    [UIColor.darkGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = UIBezierPath.bezierPath;
    [rectanglePath moveToPoint: CGPointMake(12.5, 22)];
    [rectanglePath addLineToPoint: CGPointMake(13.5, 22)];
    [rectanglePath addLineToPoint: CGPointMake(14, 10)];
    [rectanglePath addLineToPoint: CGPointMake(12, 10)];
    [rectanglePath addLineToPoint: CGPointMake(12.5, 22)];
    [rectanglePath closePath];
    [UIColor.darkGrayColor setFill];
    [rectanglePath fill];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = UIBezierPath.bezierPath;
    [oval2Path moveToPoint: CGPointMake(11.5, 3.75)];
    [oval2Path addCurveToPoint: CGPointMake(10.46, 4.31) controlPoint1: CGPointMake(11.12, 3.8) controlPoint2: CGPointMake(10.75, 3.99)];
    [oval2Path addCurveToPoint: CGPointMake(10, 5.23) controlPoint1: CGPointMake(10.23, 4.58) controlPoint2: CGPointMake(10.07, 4.89)];
    oval2Path.lineCapStyle = kCGLineCapRound;

    oval2Path.lineJoinStyle = kCGLineJoinRound;

    [UIColor.darkGrayColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];
}

+ (void)drawChat;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(25.25, 6.52)];
    [bezier2Path addCurveToPoint: CGPointMake(25.25, 21.07) controlPoint1: CGPointMake(30.92, 10.54) controlPoint2: CGPointMake(30.92, 17.05)];
    [bezier2Path addCurveToPoint: CGPointMake(8.75, 23.09) controlPoint1: CGPointMake(20.79, 24.24) controlPoint2: CGPointMake(14.14, 24.91)];
    [bezier2Path addLineToPoint: CGPointMake(5.07, 28.5)];
    [bezier2Path addLineToPoint: CGPointMake(3.81, 20.34)];
    [bezier2Path addCurveToPoint: CGPointMake(4.75, 6.52) controlPoint1: CGPointMake(-0.9, 16.3) controlPoint2: CGPointMake(-0.58, 10.3)];
    [bezier2Path addCurveToPoint: CGPointMake(25.25, 6.52) controlPoint1: CGPointMake(10.41, 2.49) controlPoint2: CGPointMake(19.59, 2.49)];
    [bezier2Path closePath];
    bezier2Path.lineJoinStyle = kCGLineJoinRound;

    [UIColor.darkGrayColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 8, 14);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-2, -2, 4, 4)];
    [UIColor.darkGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 14);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-2, -2, 4, 4)];
    [UIColor.darkGrayColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];

    CGContextRestoreGState(context);


    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 22, 14);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-2, -2, 4, 4)];
    [UIColor.darkGrayColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawTable;
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.5, 1, 7, 7)];
    [UIColor.darkGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.5, 11, 7, 7)];
    [UIColor.darkGrayColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.5, 21, 7, 7)];
    [UIColor.darkGrayColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(11, 3, 19, 2.5)];
    [UIColor.darkGrayColor setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(11, 13, 19, 2.5)];
    [UIColor.darkGrayColor setFill];
    [rectangle2Path fill];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(11, 23, 19, 2.5)];
    [UIColor.darkGrayColor setFill];
    [rectangle3Path fill];
}

+ (void)drawAccuracyGaugeWithGpsAccuracy: (CGFloat)gpsAccuracy;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* messagePin = [UIColor colorWithRed: 0.188 green: 0.37 blue: 0.891 alpha: 1];
    UIColor* gpsGreen = [UIColor colorWithRed: 0.077 green: 0.932 blue: 0.124 alpha: 1];
    UIColor* gpsWhite = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color19 = [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 0.373];

    //// Variable Declarations
    UIColor* first = gpsAccuracy < 200 ? gpsGreen : gpsWhite;
    UIColor* second = gpsAccuracy < 150 ? gpsGreen : gpsWhite;
    UIColor* third = gpsAccuracy < 100 ? gpsGreen : gpsWhite;
    UIColor* fourth = gpsAccuracy < 50 ? gpsGreen : gpsWhite;

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 43, 15);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-10, -10, 20, 20)];
    [first setFill];
    [ovalPath fill];
    [color19 setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 68, 15);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-10, -10, 20, 20)];
    [second setFill];
    [oval2Path fill];
    [color19 setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];

    CGContextRestoreGState(context);


    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 93, 15);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-10, -10, 20, 20)];
    [third setFill];
    [oval3Path fill];
    [color19 setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];

    CGContextRestoreGState(context);


    //// Oval 4 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 118, 15);

    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-10, -10, 20, 20)];
    [fourth setFill];
    [oval4Path fill];
    [color19 setStroke];
    oval4Path.lineWidth = 1;
    [oval4Path stroke];

    CGContextRestoreGState(context);


    //// Oval 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);

    CGRect oval5Rect = CGRectMake(-10, -10, 20, 20);
    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: oval5Rect];
    [UIColor.lightGrayColor setStroke];
    oval5Path.lineWidth = 1.5;
    [oval5Path stroke];
    NSMutableParagraphStyle* oval5Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    oval5Style.alignment = NSTextAlignmentCenter;

    NSDictionary* oval5FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: messagePin, NSParagraphStyleAttributeName: oval5Style};

    [@"	" drawInRect: oval5Rect withAttributes: oval5FontAttributes];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(14, 2, 2, 9)];
    [UIColor.lightGrayColor setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(14, 19, 2, 9)];
    [UIColor.lightGrayColor setFill];
    [rectangle2Path fill];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(19, 14, 9, 2)];
    [UIColor.lightGrayColor setFill];
    [rectangle3Path fill];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(2, 14, 9, 2)];
    [UIColor.lightGrayColor setFill];
    [rectangle4Path fill];
}

+ (void)drawGPS;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 9.75, 9);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-4.75, -4.5, 9.5, 9)];
    [UIColor.darkGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = UIBezierPath.bezierPath;
    [rectanglePath moveToPoint: CGPointMake(9.5, 25)];
    [rectanglePath addLineToPoint: CGPointMake(10.5, 25)];
    [rectanglePath addLineToPoint: CGPointMake(11, 13)];
    [rectanglePath addLineToPoint: CGPointMake(9, 13)];
    [rectanglePath addLineToPoint: CGPointMake(9.5, 25)];
    [rectanglePath closePath];
    [UIColor.darkGrayColor setFill];
    [rectanglePath fill];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = UIBezierPath.bezierPath;
    [oval2Path moveToPoint: CGPointMake(8.5, 6.02)];
    [oval2Path addCurveToPoint: CGPointMake(7.19, 6.59) controlPoint1: CGPointMake(8.02, 6.07) controlPoint2: CGPointMake(7.56, 6.26)];
    [oval2Path addCurveToPoint: CGPointMake(6.61, 7.5) controlPoint1: CGPointMake(6.89, 6.85) controlPoint2: CGPointMake(6.7, 7.17)];
    oval2Path.lineCapStyle = kCGLineCapRound;

    oval2Path.lineJoinStyle = kCGLineJoinRound;

    [UIColor.darkGrayColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 90, 14.5);

    CGRect rectangle2Rect = CGRectMake(-72, -8.5, 144, 17);
    {
        NSString* textContent = @"[47.605046 | -122.334450]";
        NSMutableParagraphStyle* rectangle2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangle2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangle2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Arial-BoldMT" size: UIFont.smallSystemFontSize], NSForegroundColorAttributeName: UIColor.darkGrayColor, NSParagraphStyleAttributeName: rectangle2Style};

        [textContent drawInRect: CGRectOffset(rectangle2Rect, 0, (CGRectGetHeight(rectangle2Rect) - [textContent boundingRectWithSize: rectangle2Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangle2FontAttributes context: nil].size.height) / 2) withAttributes: rectangle2FontAttributes];
    }

    CGContextRestoreGState(context);
}

+ (void)drawMessageBubble;
{
    //// Color Declarations
    UIColor* twitter = [UIColor colorWithRed: 0.012 green: 0.675 blue: 0.933 alpha: 1];
    CGFloat twitterHSBA[4];
    [twitter getHue: &twitterHSBA[0] saturation: &twitterHSBA[1] brightness: &twitterHSBA[2] alpha: &twitterHSBA[3]];

    UIColor* color16 = [UIColor colorWithHue: twitterHSBA[0] saturation: 0.8 brightness: twitterHSBA[2] alpha: twitterHSBA[3]];

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(216.31, 9.46)];
    [bezier2Path addLineToPoint: CGPointMake(216.58, 9.52)];
    [bezier2Path addCurveToPoint: CGPointMake(220.48, 13.42) controlPoint1: CGPointMake(218.39, 10.18) controlPoint2: CGPointMake(219.82, 11.61)];
    [bezier2Path addCurveToPoint: CGPointMake(221, 19.7) controlPoint1: CGPointMake(221, 15.08) controlPoint2: CGPointMake(221, 16.62)];
    [bezier2Path addCurveToPoint: CGPointMake(221, 144.85) controlPoint1: CGPointMake(221, 19.7) controlPoint2: CGPointMake(221, 98.31)];
    [bezier2Path addCurveToPoint: CGPointMake(238.5, 155.75) controlPoint1: CGPointMake(229.52, 150.15) controlPoint2: CGPointMake(238.5, 155.75)];
    [bezier2Path addCurveToPoint: CGPointMake(221, 166.65) controlPoint1: CGPointMake(238.5, 155.75) controlPoint2: CGPointMake(229.52, 161.35)];
    [bezier2Path addCurveToPoint: CGPointMake(221, 178.3) controlPoint1: CGPointMake(221, 173.93) controlPoint2: CGPointMake(221, 178.3)];
    [bezier2Path addCurveToPoint: CGPointMake(220.54, 184.31) controlPoint1: CGPointMake(221, 181.38) controlPoint2: CGPointMake(221, 182.92)];
    [bezier2Path addLineToPoint: CGPointMake(220.48, 184.58)];
    [bezier2Path addCurveToPoint: CGPointMake(216.58, 188.48) controlPoint1: CGPointMake(219.82, 186.39) controlPoint2: CGPointMake(218.39, 187.82)];
    [bezier2Path addCurveToPoint: CGPointMake(210.3, 189) controlPoint1: CGPointMake(214.92, 189) controlPoint2: CGPointMake(213.38, 189)];
    [bezier2Path addLineToPoint: CGPointMake(21.7, 189)];
    [bezier2Path addCurveToPoint: CGPointMake(15.69, 188.54) controlPoint1: CGPointMake(18.62, 189) controlPoint2: CGPointMake(17.08, 189)];
    [bezier2Path addLineToPoint: CGPointMake(15.42, 188.48)];
    [bezier2Path addCurveToPoint: CGPointMake(11.52, 184.58) controlPoint1: CGPointMake(13.61, 187.82) controlPoint2: CGPointMake(12.18, 186.39)];
    [bezier2Path addCurveToPoint: CGPointMake(11, 178.3) controlPoint1: CGPointMake(11, 182.92) controlPoint2: CGPointMake(11, 181.38)];
    [bezier2Path addLineToPoint: CGPointMake(11, 19.7)];
    [bezier2Path addCurveToPoint: CGPointMake(11.46, 13.69) controlPoint1: CGPointMake(11, 16.62) controlPoint2: CGPointMake(11, 15.08)];
    [bezier2Path addLineToPoint: CGPointMake(11.52, 13.42)];
    [bezier2Path addCurveToPoint: CGPointMake(15.42, 9.52) controlPoint1: CGPointMake(12.18, 11.61) controlPoint2: CGPointMake(13.61, 10.18)];
    [bezier2Path addCurveToPoint: CGPointMake(21.7, 9) controlPoint1: CGPointMake(17.08, 9) controlPoint2: CGPointMake(18.62, 9)];
    [bezier2Path addLineToPoint: CGPointMake(210.3, 9)];
    [bezier2Path addCurveToPoint: CGPointMake(216.31, 9.46) controlPoint1: CGPointMake(213.38, 9) controlPoint2: CGPointMake(214.92, 9)];
    [bezier2Path closePath];
    [color16 setStroke];
    bezier2Path.lineWidth = 3;
    [bezier2Path stroke];
}

+ (void)drawRightMessageBubbleWithFrame: (CGRect)frame;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Subframes
    CGRect frame2 = CGRectMake(CGRectGetMinX(frame) + CGRectGetWidth(frame) - 59, CGRectGetMinY(frame) + CGRectGetHeight(frame) - 26, 30, 23);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.7, CGRectGetMinY(frame) + 5.65)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.31, CGRectGetMinY(frame) + 5.75)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.75, CGRectGetMinY(frame) + 11.31) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.73, CGRectGetMinY(frame) + 6.69) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 7.69, CGRectGetMinY(frame) + 8.73)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMinY(frame) + 20.29) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMinY(frame) + 13.68) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMinY(frame) + 15.88)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMaxY(frame) - 31.29)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.65, CGRectGetMaxY(frame) - 22.7) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMaxY(frame) - 26.88) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMaxY(frame) - 24.68)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.75, CGRectGetMaxY(frame) - 22.31)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.31, CGRectGetMaxY(frame) - 16.75) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 7.69, CGRectGetMaxY(frame) - 19.73) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.73, CGRectGetMaxY(frame) - 17.69)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 26.29, CGRectGetMaxY(frame) - 16) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 14.68, CGRectGetMaxY(frame) - 16) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 21.88, CGRectGetMaxY(frame) - 16)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame2) - 3.32, CGRectGetMaxY(frame2) - 13)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame2) - 14.32, CGRectGetMaxY(frame2) - 2) controlPoint1: CGPointMake(CGRectGetMaxX(frame2) - 8.33, CGRectGetMaxY(frame2) - 7.99) controlPoint2: CGPointMake(CGRectGetMaxX(frame2) - 14.32, CGRectGetMaxY(frame2) - 2)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame2) - 25.32, CGRectGetMaxY(frame2) - 13) controlPoint1: CGPointMake(CGRectGetMaxX(frame2) - 14.32, CGRectGetMaxY(frame2) - 2) controlPoint2: CGPointMake(CGRectGetMaxX(frame2) - 20.32, CGRectGetMaxY(frame2) - 7.99)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 21.29, CGRectGetMaxY(frame) - 16)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 12.7, CGRectGetMaxY(frame) - 16.65) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 16.88, CGRectGetMaxY(frame) - 16) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 14.68, CGRectGetMaxY(frame) - 16)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 12.31, CGRectGetMaxY(frame) - 16.75)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.75, CGRectGetMaxY(frame) - 22.31) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.73, CGRectGetMaxY(frame) - 17.69) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 7.69, CGRectGetMaxY(frame) - 19.73)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMaxY(frame) - 31.29) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMaxY(frame) - 24.68) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMaxY(frame) - 26.88)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMinY(frame) + 20.29)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.65, CGRectGetMinY(frame) + 11.7) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMinY(frame) + 15.88) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMinY(frame) + 13.68)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 6.75, CGRectGetMinY(frame) + 11.31)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 12.31, CGRectGetMinY(frame) + 5.75) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 7.69, CGRectGetMinY(frame) + 8.73) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.73, CGRectGetMinY(frame) + 6.69)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 21.29, CGRectGetMinY(frame) + 5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 14.68, CGRectGetMinY(frame) + 5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 16.88, CGRectGetMinY(frame) + 5)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 21.29, CGRectGetMinY(frame) + 5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.7, CGRectGetMinY(frame) + 5.65) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 16.88, CGRectGetMinY(frame) + 5) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 14.68, CGRectGetMinY(frame) + 5)];
    [bezierPath closePath];
    CGContextSaveGState(context);
    [bezierPath addClip];
    CGRect bezierBounds = CGPathGetPathBoundingBox(bezierPath.CGPath);
    CGContextDrawLinearGradient(context, PCLocoMojo.messageGradient.CGGradient,
        CGPointMake(CGRectGetMidX(bezierBounds), CGRectGetMinY(bezierBounds)),
        CGPointMake(CGRectGetMidX(bezierBounds), CGRectGetMaxY(bezierBounds)),
        0);
    CGContextRestoreGState(context);
}

+ (void)drawLeftMessageBubbleWithFrame: (CGRect)frame;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Subframes
    CGRect frame2 = CGRectMake(CGRectGetMinX(frame) + 27, CGRectGetMinY(frame) + CGRectGetHeight(frame) - 28, 28, 20);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.7, CGRectGetMinY(frame) + 6.65)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.31, CGRectGetMinY(frame) + 6.75)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.75, CGRectGetMinY(frame) + 12.31) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 9.73, CGRectGetMinY(frame) + 7.69) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 7.69, CGRectGetMinY(frame) + 9.73)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMinY(frame) + 21.29) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMinY(frame) + 14.68) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMinY(frame) + 16.88)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMaxY(frame) - 33.29)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.65, CGRectGetMaxY(frame) - 24.7) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMaxY(frame) - 28.88) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 6, CGRectGetMaxY(frame) - 26.68)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 6.75, CGRectGetMaxY(frame) - 24.31)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.31, CGRectGetMaxY(frame) - 18.75) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 7.69, CGRectGetMaxY(frame) - 21.73) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 9.73, CGRectGetMaxY(frame) - 19.69)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 21.29, CGRectGetMaxY(frame) - 18) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 14.68, CGRectGetMaxY(frame) - 18) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 16.88, CGRectGetMaxY(frame) - 18)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame2) + 24.14, CGRectGetMaxY(frame2) - 10)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame2) + 14.14, CGRectGetMaxY(frame2)) controlPoint1: CGPointMake(CGRectGetMinX(frame2) + 19.97, CGRectGetMaxY(frame2) - 5.83) controlPoint2: CGPointMake(CGRectGetMinX(frame2) + 14.14, CGRectGetMaxY(frame2))];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame2) + 4.14, CGRectGetMaxY(frame2) - 10) controlPoint1: CGPointMake(CGRectGetMinX(frame2) + 14.14, CGRectGetMaxY(frame2)) controlPoint2: CGPointMake(CGRectGetMinX(frame2) + 8.32, CGRectGetMaxY(frame2) - 5.83)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 20.29, CGRectGetMaxY(frame) - 18)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 11.7, CGRectGetMaxY(frame) - 18.65) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 15.88, CGRectGetMaxY(frame) - 18) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 13.68, CGRectGetMaxY(frame) - 18)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 11.31, CGRectGetMaxY(frame) - 18.75)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 5.75, CGRectGetMaxY(frame) - 24.31) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 8.73, CGRectGetMaxY(frame) - 19.69) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6.69, CGRectGetMaxY(frame) - 21.73)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 5, CGRectGetMaxY(frame) - 33.29) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 5, CGRectGetMaxY(frame) - 26.68) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 5, CGRectGetMaxY(frame) - 28.88)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 21.29)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 5.65, CGRectGetMinY(frame) + 12.7) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 16.88) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 5, CGRectGetMinY(frame) + 14.68)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 5.75, CGRectGetMinY(frame) + 12.31)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 11.31, CGRectGetMinY(frame) + 6.75) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6.69, CGRectGetMinY(frame) + 9.73) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 8.73, CGRectGetMinY(frame) + 7.69)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 20.29, CGRectGetMinY(frame) + 6) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 13.68, CGRectGetMinY(frame) + 6) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 15.88, CGRectGetMinY(frame) + 6)];
    [bezierPath addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 21.29, CGRectGetMinY(frame) + 6)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 12.7, CGRectGetMinY(frame) + 6.65) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 16.88, CGRectGetMinY(frame) + 6) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 14.68, CGRectGetMinY(frame) + 6)];
    [bezierPath closePath];
    CGContextSaveGState(context);
    [bezierPath addClip];
    CGRect bezierBounds = CGPathGetPathBoundingBox(bezierPath.CGPath);
    CGContextDrawLinearGradient(context, PCLocoMojo.messageAwayGradient.CGGradient,
        CGPointMake(CGRectGetMidX(bezierBounds), CGRectGetMinY(bezierBounds)),
        CGPointMake(CGRectGetMidX(bezierBounds), CGRectGetMaxY(bezierBounds)),
        0);
    CGContextRestoreGState(context);
}

+ (void)drawRightSharpMessageBubbleWithFrame: (CGRect)frame;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Subframes
    CGRect frame2 = CGRectMake(CGRectGetMinX(frame) + CGRectGetWidth(frame) - 44, CGRectGetMinY(frame) + CGRectGetHeight(frame) - 26, 28, 23);


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 9.7, CGRectGetMinY(frame) + 5.65)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 9.31, CGRectGetMinY(frame) + 5.75)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 3.75, CGRectGetMinY(frame) + 11.31) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 6.73, CGRectGetMinY(frame) + 6.69) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 4.69, CGRectGetMinY(frame) + 8.73)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 3, CGRectGetMinY(frame) + 20.29) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 3, CGRectGetMinY(frame) + 13.68) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 3, CGRectGetMinY(frame) + 15.88)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 3, CGRectGetMaxY(frame) - 34.29)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 3.65, CGRectGetMaxY(frame) - 25.7) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 3, CGRectGetMaxY(frame) - 29.88) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 3, CGRectGetMaxY(frame) - 27.68)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 3.75, CGRectGetMaxY(frame) - 25.31)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 9.31, CGRectGetMaxY(frame) - 19.75) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 4.69, CGRectGetMaxY(frame) - 22.73) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 6.73, CGRectGetMaxY(frame) - 20.69)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame2) - 2.29, CGRectGetMaxY(frame2) - 16) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 11.68, CGRectGetMaxY(frame) - 19) controlPoint2: CGPointMake(CGRectGetMaxX(frame2) + 2.12, CGRectGetMaxY(frame2) - 16)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame2) + 21, CGRectGetMaxY(frame2) - 16)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame2) + 8.5, CGRectGetMaxY(frame2) - 3.5) controlPoint1: CGPointMake(CGRectGetMinX(frame2) + 14.84, CGRectGetMaxY(frame2) - 9.84) controlPoint2: CGPointMake(CGRectGetMinX(frame2) + 8.5, CGRectGetMaxY(frame2) - 3.5)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame2) + 8.5, CGRectGetMaxY(frame2) - 16) controlPoint1: CGPointMake(CGRectGetMinX(frame2) + 8.5, CGRectGetMaxY(frame2) - 3.5) controlPoint2: CGPointMake(CGRectGetMinX(frame2) + 8.5, CGRectGetMaxY(frame2) - 3.5)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame2) + 5.03, CGRectGetMinY(frame2) + 7)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 21.29, CGRectGetMaxY(frame) - 19)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 12.7, CGRectGetMaxY(frame) - 19.65) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 16.88, CGRectGetMaxY(frame) - 19) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 14.68, CGRectGetMaxY(frame) - 19)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 12.31, CGRectGetMaxY(frame) - 19.75)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.75, CGRectGetMaxY(frame) - 25.31) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 9.73, CGRectGetMaxY(frame) - 20.69) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 7.69, CGRectGetMaxY(frame) - 22.73)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMaxY(frame) - 34.29) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMaxY(frame) - 27.68) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMaxY(frame) - 29.88)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMinY(frame) + 22.25)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.65, CGRectGetMinY(frame) + 12.83) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMinY(frame) + 17.42) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 6, CGRectGetMinY(frame) + 15.01)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 6.75, CGRectGetMinY(frame) + 12.41)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 12.31, CGRectGetMinY(frame) + 6.31) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 7.69, CGRectGetMinY(frame) + 9.57) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 9.73, CGRectGetMinY(frame) + 7.34)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 21.29, CGRectGetMinY(frame) + 5.48) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 14.68, CGRectGetMinY(frame) + 5.48) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 16.88, CGRectGetMinY(frame) + 5.48)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 18.29, CGRectGetMinY(frame) + 5)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 9.7, CGRectGetMinY(frame) + 5.65) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 13.88, CGRectGetMinY(frame) + 5) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 11.68, CGRectGetMinY(frame) + 5)];
    [bezier2Path closePath];
    CGContextSaveGState(context);
    [bezier2Path addClip];
    CGRect bezier2Bounds = CGPathGetPathBoundingBox(bezier2Path.CGPath);
    CGContextDrawLinearGradient(context, PCLocoMojo.messageGradient.CGGradient,
        CGPointMake(CGRectGetMidX(bezier2Bounds), CGRectGetMinY(bezier2Bounds)),
        CGPointMake(CGRectGetMidX(bezier2Bounds), CGRectGetMaxY(bezier2Bounds)),
        0);
    CGContextRestoreGState(context);
}

+ (void)drawLeftSharpMessageBubbleWithFrame: (CGRect)frame;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Subframes
    CGRect frame2 = CGRectMake(CGRectGetMinX(frame) + 18, CGRectGetMinY(frame) + CGRectGetHeight(frame) - 22, 23, 20);


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.7, CGRectGetMinY(frame) + 4.65)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.31, CGRectGetMinY(frame) + 4.75)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 5.75, CGRectGetMinY(frame) + 10.31) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 8.73, CGRectGetMinY(frame) + 5.69) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 6.69, CGRectGetMinY(frame) + 7.73)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 5, CGRectGetMinY(frame) + 19.29) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 5, CGRectGetMinY(frame) + 12.68) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 5, CGRectGetMinY(frame) + 14.88)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 5, CGRectGetMaxY(frame) - 30.29)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 5.65, CGRectGetMaxY(frame) - 21.7) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 5, CGRectGetMaxY(frame) - 25.88) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 5, CGRectGetMaxY(frame) - 23.68)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 5.75, CGRectGetMaxY(frame) - 21.31)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.31, CGRectGetMaxY(frame) - 15.75) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 6.69, CGRectGetMaxY(frame) - 18.73) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 8.73, CGRectGetMaxY(frame) - 16.69)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.29, CGRectGetMaxY(frame) - 15) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 13.68, CGRectGetMaxY(frame) - 15) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 15.88, CGRectGetMaxY(frame) - 15)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame2) + 18, CGRectGetMaxY(frame2) - 13)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame2) + 18, CGRectGetMaxY(frame2)) controlPoint1: CGPointMake(CGRectGetMinX(frame2) + 18, CGRectGetMaxY(frame2) - 6.92) controlPoint2: CGPointMake(CGRectGetMinX(frame2) + 18, CGRectGetMaxY(frame2))];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame2) + 5, CGRectGetMaxY(frame2) - 13) controlPoint1: CGPointMake(CGRectGetMinX(frame2) + 18, CGRectGetMaxY(frame2)) controlPoint2: CGPointMake(CGRectGetMinX(frame2) + 11.08, CGRectGetMaxY(frame2) - 6.92)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame2) + 1.29, CGRectGetMaxY(frame2) - 13)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 10.7, CGRectGetMaxY(frame) - 15.65) controlPoint1: CGPointMake(CGRectGetMinX(frame2) - 3.12, CGRectGetMaxY(frame2) - 13) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 12.68, CGRectGetMaxY(frame) - 15)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 10.31, CGRectGetMaxY(frame) - 15.75)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 4.75, CGRectGetMaxY(frame) - 21.31) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 7.73, CGRectGetMaxY(frame) - 16.69) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 5.69, CGRectGetMaxY(frame) - 18.73)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 4, CGRectGetMaxY(frame) - 30.29) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 4, CGRectGetMaxY(frame) - 23.68) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 4, CGRectGetMaxY(frame) - 25.88)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 4, CGRectGetMinY(frame) + 19.29)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 4.65, CGRectGetMinY(frame) + 10.7) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 4, CGRectGetMinY(frame) + 14.88) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 4, CGRectGetMinY(frame) + 12.68)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 4.75, CGRectGetMinY(frame) + 10.31)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 10.31, CGRectGetMinY(frame) + 4.75) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 5.69, CGRectGetMinY(frame) + 7.73) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 7.73, CGRectGetMinY(frame) + 5.69)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 19.29, CGRectGetMinY(frame) + 4) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 12.68, CGRectGetMinY(frame) + 4) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 14.88, CGRectGetMinY(frame) + 4)];
    [bezier2Path addLineToPoint: CGPointMake(CGRectGetMaxX(frame) - 20.29, CGRectGetMinY(frame) + 4)];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMaxX(frame) - 11.7, CGRectGetMinY(frame) + 4.65) controlPoint1: CGPointMake(CGRectGetMaxX(frame) - 15.88, CGRectGetMinY(frame) + 4) controlPoint2: CGPointMake(CGRectGetMaxX(frame) - 13.68, CGRectGetMinY(frame) + 4)];
    [bezier2Path closePath];
    CGContextSaveGState(context);
    [bezier2Path addClip];
    CGRect bezier2Bounds = CGPathGetPathBoundingBox(bezier2Path.CGPath);
    CGContextDrawLinearGradient(context, PCLocoMojo.messageAwayGradient.CGGradient,
        CGPointMake(CGRectGetMidX(bezier2Bounds), CGRectGetMinY(bezier2Bounds)),
        CGPointMake(CGRectGetMidX(bezier2Bounds), CGRectGetMaxY(bezier2Bounds)),
        0);
    CGContextRestoreGState(context);
}

+ (void)drawCanvas6;
{

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [UIColor.grayColor setFill];
    [bezier2Path fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(108, 52, 161, 29);
    {
        NSString* textContent = @"Loco Mojo";
        CGRect textInset = CGRectInset(textRect, 0, 3);
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Copperplate-Light" size: 16], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textStyle};

        [textContent drawInRect: CGRectOffset(textInset, 0, (CGRectGetHeight(textInset) - [textContent boundingRectWithSize: textInset.size options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height) / 2) withAttributes: textFontAttributes];
    }
}

#pragma mark Generated Images

+ (UIImage*)imageOfLoginDisabled;
{
    if (_imageOfLoginDisabled)
        return _imageOfLoginDisabled;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawLoginDisabled];
    _imageOfLoginDisabled = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginDisabled;
}

+ (UIImage*)imageOfLoginNormal;
{
    if (_imageOfLoginNormal)
        return _imageOfLoginNormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawLoginNormal];
    _imageOfLoginNormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginNormal;
}

+ (UIImage*)imageOfLoginTwitter;
{
    if (_imageOfLoginTwitter)
        return _imageOfLoginTwitter;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawLoginTwitter];
    _imageOfLoginTwitter = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginTwitter;
}

+ (UIImage*)imageOfFacebookLogin;
{
    if (_imageOfFacebookLogin)
        return _imageOfFacebookLogin;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawFacebookLogin];
    _imageOfFacebookLogin = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfFacebookLogin;
}

+ (UIImage*)imageOfCurrentLocationWithIsSelected: (BOOL)isSelected;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [PCLocoMojo drawCurrentLocationWithIsSelected: isSelected];
    UIImage* imageOfCurrentLocation = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfCurrentLocation;
}

+ (UIImage*)imageOfMessage;
{
    if (_imageOfMessage)
        return _imageOfMessage;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [PCLocoMojo drawMessage];
    _imageOfMessage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMessage;
}

+ (UIImage*)imageOfSend;
{
    if (_imageOfSend)
        return _imageOfSend;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [PCLocoMojo drawSend];
    _imageOfSend = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSend;
}

+ (UIImage*)imageOfPinIcon;
{
    if (_imageOfPinIcon)
        return _imageOfPinIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(60, 60), NO, 0.0f);
    [PCLocoMojo drawPinIcon];
    _imageOfPinIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfPinIcon;
}

+ (UIImage*)imageOfCanvas2;
{
    if (_imageOfCanvas2)
        return _imageOfCanvas2;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(60, 60), NO, 0.0f);
    [PCLocoMojo drawCanvas2];
    _imageOfCanvas2 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas2;
}

+ (UIImage*)imageOfCircle;
{
    if (_imageOfCircle)
        return _imageOfCircle;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PCLocoMojo drawCircle];
    _imageOfCircle = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCircle;
}

+ (UIImage*)imageOfAvatar;
{
    if (_imageOfAvatar)
        return _imageOfAvatar;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PCLocoMojo drawAvatar];
    _imageOfAvatar = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfAvatar;
}

+ (UIImage*)imageOfAdd;
{
    if (_imageOfAdd)
        return _imageOfAdd;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PCLocoMojo drawAdd];
    _imageOfAdd = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfAdd;
}

+ (UIImage*)imageOfPin;
{
    if (_imageOfPin)
        return _imageOfPin;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 22), NO, 0.0f);
    [PCLocoMojo drawPin];
    _imageOfPin = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfPin;
}

+ (UIImage*)imageOfChat;
{
    if (_imageOfChat)
        return _imageOfChat;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PCLocoMojo drawChat];
    _imageOfChat = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfChat;
}

+ (UIImage*)imageOfTable;
{
    if (_imageOfTable)
        return _imageOfTable;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PCLocoMojo drawTable];
    _imageOfTable = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTable;
}

+ (UIImage*)imageOfAccuracyGaugeWithGpsAccuracy: (CGFloat)gpsAccuracy;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(135, 30), NO, 0.0f);
    [PCLocoMojo drawAccuracyGaugeWithGpsAccuracy: gpsAccuracy];
    UIImage* imageOfAccuracyGauge = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfAccuracyGauge;
}

+ (UIImage*)imageOfMessageBubble;
{
    if (_imageOfMessageBubble)
        return _imageOfMessageBubble;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(250, 200), NO, 0.0f);
    [PCLocoMojo drawMessageBubble];
    _imageOfMessageBubble = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMessageBubble;
}

+ (UIImage*)imageOfRightMessageBubbleWithFrame: (CGRect)frame;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(213, 131), NO, 0.0f);
    [PCLocoMojo drawRightMessageBubbleWithFrame: frame];
    UIImage* imageOfRightMessageBubble = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfRightMessageBubble;
}

+ (UIImage*)imageOfLeftMessageBubbleWithFrame: (CGRect)frame;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(218, 131), NO, 0.0f);
    [PCLocoMojo drawLeftMessageBubbleWithFrame: frame];
    UIImage* imageOfLeftMessageBubble = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfLeftMessageBubble;
}

#pragma mark Customization Infrastructure

- (void)setLoginDisabledTargets: (NSArray*)loginDisabledTargets
{
    _loginDisabledTargets = loginDisabledTargets;

    for (id target in self.loginDisabledTargets)
        [target setImage: PCLocoMojo.imageOfLoginDisabled];
}

- (void)setLoginNormalTargets: (NSArray*)loginNormalTargets
{
    _loginNormalTargets = loginNormalTargets;

    for (id target in self.loginNormalTargets)
        [target setImage: PCLocoMojo.imageOfLoginNormal];
}

- (void)setLoginTwitterTargets: (NSArray*)loginTwitterTargets
{
    _loginTwitterTargets = loginTwitterTargets;

    for (id target in self.loginTwitterTargets)
        [target setImage: PCLocoMojo.imageOfLoginTwitter];
}

- (void)setFacebookLoginTargets: (NSArray*)facebookLoginTargets
{
    _facebookLoginTargets = facebookLoginTargets;

    for (id target in self.facebookLoginTargets)
        [target setImage: PCLocoMojo.imageOfFacebookLogin];
}

- (void)setMessageTargets: (NSArray*)messageTargets
{
    _messageTargets = messageTargets;

    for (id target in self.messageTargets)
        [target setImage: PCLocoMojo.imageOfMessage];
}

- (void)setSendTargets: (NSArray*)sendTargets
{
    _sendTargets = sendTargets;

    for (id target in self.sendTargets)
        [target setImage: PCLocoMojo.imageOfSend];
}

- (void)setPinIconTargets: (NSArray*)pinIconTargets
{
    _pinIconTargets = pinIconTargets;

    for (id target in self.pinIconTargets)
        [target setImage: PCLocoMojo.imageOfPinIcon];
}

- (void)setCanvas2Targets: (NSArray*)canvas2Targets
{
    _canvas2Targets = canvas2Targets;

    for (id target in self.canvas2Targets)
        [target setImage: PCLocoMojo.imageOfCanvas2];
}

- (void)setCircleTargets: (NSArray*)circleTargets
{
    _circleTargets = circleTargets;

    for (id target in self.circleTargets)
        [target setImage: PCLocoMojo.imageOfCircle];
}

- (void)setAvatarTargets: (NSArray*)avatarTargets
{
    _avatarTargets = avatarTargets;

    for (id target in self.avatarTargets)
        [target setImage: PCLocoMojo.imageOfAvatar];
}

- (void)setAddTargets: (NSArray*)addTargets
{
    _addTargets = addTargets;

    for (id target in self.addTargets)
        [target setImage: PCLocoMojo.imageOfAdd];
}

- (void)setPinTargets: (NSArray*)pinTargets
{
    _pinTargets = pinTargets;

    for (id target in self.pinTargets)
        [target setImage: PCLocoMojo.imageOfPin];
}

- (void)setChatTargets: (NSArray*)chatTargets
{
    _chatTargets = chatTargets;

    for (id target in self.chatTargets)
        [target setImage: PCLocoMojo.imageOfChat];
}

- (void)setTableTargets: (NSArray*)tableTargets
{
    _tableTargets = tableTargets;

    for (id target in self.tableTargets)
        [target setImage: PCLocoMojo.imageOfTable];
}

- (void)setMessageBubbleTargets: (NSArray*)messageBubbleTargets
{
    _messageBubbleTargets = messageBubbleTargets;

    for (id target in self.messageBubbleTargets)
        [target setImage: PCLocoMojo.imageOfMessageBubble];
}


@end



@interface PCGradient ()
{
    CGGradientRef _CGGradient;
}
@end

@implementation PCGradient

- (instancetype)initWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    self = super.init;
    if (self)
    {
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        NSMutableArray* cgColors = NSMutableArray.array;
        for (UIColor* color in colors)
            [cgColors addObject: (id)color.CGColor];

        _CGGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)cgColors, locations);
        CGColorSpaceRelease(colorSpace);
    }
    return self;
}

+ (instancetype)gradientWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    return [self.alloc initWithColors: colors locations: locations];
}

+ (instancetype)gradientWithStartingColor: (UIColor*)startingColor endingColor: (UIColor*)endingColor
{
    CGFloat locations[] = {0, 1};
    return [self.alloc initWithColors: @[startingColor, endingColor] locations: locations];
}

- (void)dealloc
{
    CGGradientRelease(_CGGradient);
}

@end
