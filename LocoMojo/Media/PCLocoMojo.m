//
//  PCLocoMojo.m
//  LocoMojo
//
//  Created by Richard Lichkus on 7/24/14.
//  Copyright (c) 2014 CleverKnot LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PCLocoMojo.h"


@implementation PCLocoMojo

#pragma mark Cache

static UIColor* _loginBlueColor2 = nil;
static UIColor* _loginBlueColor = nil;

static PCGradient* _loginBlue = nil;

static UIImage* _imageOfLoginDisabled = nil;
static UIImage* _imageOfLoginNormal = nil;
static UIImage* _imageOfLoginTwitter = nil;
static UIImage* _imageOfFacebookLogin = nil;
static UIImage* _imageOfCircleOverlay = nil;
static UIImage* _imageOfMapMask = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _loginBlueColor2 = [UIColor colorWithRed: 0.05 green: 0 blue: 1 alpha: 1];
    _loginBlueColor = [UIColor colorWithRed: 0 green: 0.527 blue: 1 alpha: 1];

    // Gradients Initialization
    CGFloat loginBlueLocations[] = {0, 0.46, 1};
    _loginBlue = [PCGradient gradientWithColors: @[PCLocoMojo.loginBlueColor, [UIColor colorWithRed: 0.025 green: 0.264 blue: 1 alpha: 1], PCLocoMojo.loginBlueColor2] locations: loginBlueLocations];

}

#pragma mark Colors

+ (UIColor*)loginBlueColor2 { return _loginBlueColor2; }
+ (UIColor*)loginBlueColor { return _loginBlueColor; }

#pragma mark Gradients

+ (PCGradient*)loginBlue { return _loginBlue; }

#pragma mark Drawing Methods

+ (void)drawLoginDisabled;
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [UIColor.grayColor setFill];
    [rectanglePath fill];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(206, 4, 1, 1)];
    [UIColor.grayColor setFill];
    [ovalPath fill];
}

+ (void)drawLoginNormal;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Login Enabled Drawing
    UIBezierPath* loginEnabledPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    CGContextSaveGState(context);
    [loginEnabledPath addClip];
    CGContextDrawLinearGradient(context, PCLocoMojo.loginBlue.CGGradient, CGPointMake(120, -0), CGPointMake(120, 40), 0);
    CGContextRestoreGState(context);
}

+ (void)drawLoginTwitter;
{
    //// Color Declarations
    UIColor* twitter = [UIColor colorWithRed: 0.012 green: 0.675 blue: 0.933 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [twitter setFill];
    [rectanglePath fill];
}

+ (void)drawFacebookLogin;
{
    //// Color Declarations
    UIColor* facebook = [UIColor colorWithRed: 0.231 green: 0.349 blue: 0.596 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [facebook setFill];
    [rectanglePath fill];
}

+ (void)drawCircleOverlay;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* circleOverlayColor = [UIColor colorWithRed: 0.416 green: 0.972 blue: 0.759 alpha: 0.428];

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 14.5, 14.5);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-14.5, -14.5, 29, 29)];
    [circleOverlayColor setFill];
    [ovalPath fill];

    CGContextRestoreGState(context);
}

+ (void)drawMapMask;
{
    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 0.459];

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(191.45, 406.95)];
    [bezierPath addCurveToPoint: CGPointMake(191.45, 665.05) controlPoint1: CGPointMake(120.18, 478.22) controlPoint2: CGPointMake(120.18, 593.78)];
    [bezierPath addCurveToPoint: CGPointMake(449.55, 665.05) controlPoint1: CGPointMake(262.72, 736.32) controlPoint2: CGPointMake(378.28, 736.32)];
    [bezierPath addCurveToPoint: CGPointMake(449.55, 406.95) controlPoint1: CGPointMake(520.82, 593.78) controlPoint2: CGPointMake(520.82, 478.22)];
    [bezierPath addCurveToPoint: CGPointMake(191.45, 406.95) controlPoint1: CGPointMake(378.28, 335.68) controlPoint2: CGPointMake(262.72, 335.68)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(640, 0)];
    [bezierPath addCurveToPoint: CGPointMake(640, 1072) controlPoint1: CGPointMake(640, 0) controlPoint2: CGPointMake(640, 1072)];
    [bezierPath addLineToPoint: CGPointMake(0, 1072)];
    [bezierPath addLineToPoint: CGPointMake(0, 0)];
    [bezierPath addLineToPoint: CGPointMake(640, 0)];
    [bezierPath addLineToPoint: CGPointMake(640, 0)];
    [bezierPath closePath];
    [color setFill];
    [bezierPath fill];
}

#pragma mark Generated Images

+ (UIImage*)imageOfLoginDisabled;
{
    if (_imageOfLoginDisabled)
        return _imageOfLoginDisabled;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawLoginDisabled];
    _imageOfLoginDisabled = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginDisabled;
}

+ (UIImage*)imageOfLoginNormal;
{
    if (_imageOfLoginNormal)
        return _imageOfLoginNormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawLoginNormal];
    _imageOfLoginNormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginNormal;
}

+ (UIImage*)imageOfLoginTwitter;
{
    if (_imageOfLoginTwitter)
        return _imageOfLoginTwitter;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawLoginTwitter];
    _imageOfLoginTwitter = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginTwitter;
}

+ (UIImage*)imageOfFacebookLogin;
{
    if (_imageOfFacebookLogin)
        return _imageOfFacebookLogin;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawFacebookLogin];
    _imageOfFacebookLogin = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfFacebookLogin;
}

+ (UIImage*)imageOfCircleOverlay;
{
    if (_imageOfCircleOverlay)
        return _imageOfCircleOverlay;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(29, 29), NO, 0.0f);
    [PCLocoMojo drawCircleOverlay];
    _imageOfCircleOverlay = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCircleOverlay;
}

+ (UIImage*)imageOfMapMask;
{
    if (_imageOfMapMask)
        return _imageOfMapMask;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(640, 1072), NO, 0.0f);
    [PCLocoMojo drawMapMask];
    _imageOfMapMask = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMapMask;
}

#pragma mark Customization Infrastructure

- (void)setLoginDisabledTargets: (NSArray*)loginDisabledTargets
{
    _loginDisabledTargets = loginDisabledTargets;

    for (id target in self.loginDisabledTargets)
        [target setImage: PCLocoMojo.imageOfLoginDisabled];
}

- (void)setLoginNormalTargets: (NSArray*)loginNormalTargets
{
    _loginNormalTargets = loginNormalTargets;

    for (id target in self.loginNormalTargets)
        [target setImage: PCLocoMojo.imageOfLoginNormal];
}

- (void)setLoginTwitterTargets: (NSArray*)loginTwitterTargets
{
    _loginTwitterTargets = loginTwitterTargets;

    for (id target in self.loginTwitterTargets)
        [target setImage: PCLocoMojo.imageOfLoginTwitter];
}

- (void)setFacebookLoginTargets: (NSArray*)facebookLoginTargets
{
    _facebookLoginTargets = facebookLoginTargets;

    for (id target in self.facebookLoginTargets)
        [target setImage: PCLocoMojo.imageOfFacebookLogin];
}

- (void)setCircleOverlayTargets: (NSArray*)circleOverlayTargets
{
    _circleOverlayTargets = circleOverlayTargets;

    for (id target in self.circleOverlayTargets)
        [target setImage: PCLocoMojo.imageOfCircleOverlay];
}

- (void)setMapMaskTargets: (NSArray*)mapMaskTargets
{
    _mapMaskTargets = mapMaskTargets;

    for (id target in self.mapMaskTargets)
        [target setImage: PCLocoMojo.imageOfMapMask];
}


@end



@interface PCGradient ()
{
    CGGradientRef _CGGradient;
}
@end

@implementation PCGradient

- (instancetype)initWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    self = super.init;
    if (self)
    {
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        NSMutableArray* cgColors = NSMutableArray.array;
        for (UIColor* color in colors)
            [cgColors addObject: (id)color.CGColor];

        _CGGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)cgColors, locations);
        CGColorSpaceRelease(colorSpace);
    }
    return self;
}

+ (instancetype)gradientWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    return [self.alloc initWithColors: colors locations: locations];
}

+ (instancetype)gradientWithStartingColor: (UIColor*)startingColor endingColor: (UIColor*)endingColor
{
    CGFloat locations[] = {0, 1};
    return [self.alloc initWithColors: @[startingColor, endingColor] locations: locations];
}

- (void)dealloc
{
    CGGradientRelease(_CGGradient);
}

@end
