//
//  PCLocoMojo.m
//  LocoMojo
//
//  Created by Richard Lichkus on 7/25/14.
//  Copyright (c) 2014 CleverKnot LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PCLocoMojo.h"


@implementation PCLocoMojo

#pragma mark Cache

static UIColor* _loginBlueColor2 = nil;
static UIColor* _loginBlueColor = nil;

static PCGradient* _loginBlue = nil;

static UIImage* _imageOfLoginDisabled = nil;
static UIImage* _imageOfLoginNormal = nil;
static UIImage* _imageOfLoginTwitter = nil;
static UIImage* _imageOfFacebookLogin = nil;
static UIImage* _imageOfMessage = nil;
static UIImage* _imageOfMapIcon = nil;
static UIImage* _imageOfAdd = nil;
static UIImage* _imageOfAvatar = nil;
static UIImage* _imageOfSend = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _loginBlueColor2 = [UIColor colorWithRed: 0.05 green: 0 blue: 1 alpha: 1];
    _loginBlueColor = [UIColor colorWithRed: 0 green: 0.527 blue: 1 alpha: 1];

    // Gradients Initialization
    CGFloat loginBlueLocations[] = {0, 0.46, 1};
    _loginBlue = [PCGradient gradientWithColors: @[PCLocoMojo.loginBlueColor, [UIColor colorWithRed: 0.025 green: 0.264 blue: 1 alpha: 1], PCLocoMojo.loginBlueColor2] locations: loginBlueLocations];

}

#pragma mark Colors

+ (UIColor*)loginBlueColor2 { return _loginBlueColor2; }
+ (UIColor*)loginBlueColor { return _loginBlueColor; }

#pragma mark Gradients

+ (PCGradient*)loginBlue { return _loginBlue; }

#pragma mark Drawing Methods

+ (void)drawLoginDisabled;
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [UIColor.grayColor setFill];
    [rectanglePath fill];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(206, 4, 1, 1)];
    [UIColor.grayColor setFill];
    [ovalPath fill];
}

+ (void)drawLoginNormal;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Login Enabled Drawing
    UIBezierPath* loginEnabledPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    CGContextSaveGState(context);
    [loginEnabledPath addClip];
    CGContextDrawLinearGradient(context, PCLocoMojo.loginBlue.CGGradient, CGPointMake(120, -0), CGPointMake(120, 40), 0);
    CGContextRestoreGState(context);
}

+ (void)drawLoginTwitter;
{
    //// Color Declarations
    UIColor* twitter = [UIColor colorWithRed: 0.012 green: 0.675 blue: 0.933 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [twitter setFill];
    [rectanglePath fill];
}

+ (void)drawFacebookLogin;
{
    //// Color Declarations
    UIColor* facebook = [UIColor colorWithRed: 0.231 green: 0.349 blue: 0.596 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [facebook setFill];
    [rectanglePath fill];
}

+ (void)drawCurrentLocationWithIsSelected: (BOOL)isSelected;
{
    //// Color Declarations
    UIColor* noFill = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];
    UIColor* semiWhite = [UIColor colorWithRed: 0.114 green: 0.288 blue: 1 alpha: 0.5];

    //// Variable Declarations
    UIColor* locationFill = isSelected ? semiWhite : noFill;

    //// Polygon Drawing
    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(34, 6)];
    [polygonPath addLineToPoint: CGPointMake(25, 35)];
    [polygonPath addLineToPoint: CGPointMake(20, 22)];
    [polygonPath addLineToPoint: CGPointMake(5, 21)];
    [polygonPath addLineToPoint: CGPointMake(34, 6)];
    [polygonPath closePath];
    [locationFill setFill];
    [polygonPath fill];
    [semiWhite setStroke];
    polygonPath.lineWidth = 3;
    [polygonPath stroke];
}

+ (void)drawMessage;
{

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(31.68, 11.08)];
    [bezier2Path addCurveToPoint: CGPointMake(31.68, 25.92) controlPoint1: CGPointMake(37.35, 15.18) controlPoint2: CGPointMake(37.35, 21.82)];
    [bezier2Path addCurveToPoint: CGPointMake(15.18, 27.98) controlPoint1: CGPointMake(27.22, 29.16) controlPoint2: CGPointMake(20.57, 29.84)];
    [bezier2Path addLineToPoint: CGPointMake(6.71, 32.91)];
    [bezier2Path addCurveToPoint: CGPointMake(5, 33.91) controlPoint1: CGPointMake(6.68, 32.93) controlPoint2: CGPointMake(5, 33.91)];
    [bezier2Path addLineToPoint: CGPointMake(6, 32.24)];
    [bezier2Path addCurveToPoint: CGPointMake(10.24, 25.18) controlPoint1: CGPointMake(6.02, 32.21) controlPoint2: CGPointMake(10.24, 25.18)];
    [bezier2Path addCurveToPoint: CGPointMake(11.18, 11.08) controlPoint1: CGPointMake(5.54, 21.05) controlPoint2: CGPointMake(5.85, 14.94)];
    [bezier2Path addCurveToPoint: CGPointMake(31.68, 11.08) controlPoint1: CGPointMake(16.84, 6.97) controlPoint2: CGPointMake(26.02, 6.97)];
    [bezier2Path closePath];
    [UIColor.darkGrayColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(12.5, 16.5, 4, 4)];
    [UIColor.darkGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(19.5, 16.5, 4, 4)];
    [UIColor.darkGrayColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(26, 16.5, 4, 4)];
    [UIColor.darkGrayColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];
}

+ (void)drawMapIcon;
{

    //// Polygon Drawing
    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(20.25, 6.25)];
    [polygonPath addCurveToPoint: CGPointMake(28.5, 15.25) controlPoint1: CGPointMake(24.9, 6.25) controlPoint2: CGPointMake(28.5, 10.67)];
    [polygonPath addCurveToPoint: CGPointMake(20.25, 33.75) controlPoint1: CGPointMake(28.5, 19.83) controlPoint2: CGPointMake(20.25, 33.75)];
    [polygonPath addCurveToPoint: CGPointMake(11.5, 15.25) controlPoint1: CGPointMake(20.25, 33.75) controlPoint2: CGPointMake(11.5, 19.83)];
    [polygonPath addCurveToPoint: CGPointMake(20.25, 6.25) controlPoint1: CGPointMake(11.5, 10.67) controlPoint2: CGPointMake(15.6, 6.25)];
    [polygonPath closePath];
    [UIColor.darkGrayColor setStroke];
    polygonPath.lineWidth = 1;
    [polygonPath stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17, 10.75, 6, 6)];
    [UIColor.darkGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];
}

+ (void)drawAdd;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.75, 18.5);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(-0.75, -12.5, 1.5, 25)];
    [UIColor.darkGrayColor setFill];
    [rectanglePath fill];

    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.75, 18.5);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(-0.75, -12.5, 1.5, 25)];
    [UIColor.darkGrayColor setFill];
    [rectangle2Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawAvatar;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 25);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-9.5, -7.5, 19, 15) byRoundingCorners: UIRectCornerTopLeft | UIRectCornerTopRight cornerRadii: CGSizeMake(7, 7)];
    [rectanglePath closePath];
    [UIColor.darkGrayColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 10.5);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5.5, -5, 11, 10)];
    [UIColor.darkGrayColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawSend;
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(5.5, 19.5)];
    [bezierPath addLineToPoint: CGPointMake(17, 32)];
    [bezierPath addLineToPoint: CGPointMake(35.5, 5.5)];
    bezierPath.lineCapStyle = kCGLineCapSquare;

    [UIColor.darkGrayColor setStroke];
    bezierPath.lineWidth = 1.5;
    [bezierPath stroke];
}

#pragma mark Generated Images

+ (UIImage*)imageOfLoginDisabled;
{
    if (_imageOfLoginDisabled)
        return _imageOfLoginDisabled;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawLoginDisabled];
    _imageOfLoginDisabled = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginDisabled;
}

+ (UIImage*)imageOfLoginNormal;
{
    if (_imageOfLoginNormal)
        return _imageOfLoginNormal;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawLoginNormal];
    _imageOfLoginNormal = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginNormal;
}

+ (UIImage*)imageOfLoginTwitter;
{
    if (_imageOfLoginTwitter)
        return _imageOfLoginTwitter;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawLoginTwitter];
    _imageOfLoginTwitter = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginTwitter;
}

+ (UIImage*)imageOfFacebookLogin;
{
    if (_imageOfFacebookLogin)
        return _imageOfFacebookLogin;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCLocoMojo drawFacebookLogin];
    _imageOfFacebookLogin = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfFacebookLogin;
}

+ (UIImage*)imageOfCurrentLocationWithIsSelected: (BOOL)isSelected;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [PCLocoMojo drawCurrentLocationWithIsSelected: isSelected];
    UIImage* imageOfCurrentLocation = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfCurrentLocation;
}

+ (UIImage*)imageOfMessage;
{
    if (_imageOfMessage)
        return _imageOfMessage;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [PCLocoMojo drawMessage];
    _imageOfMessage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMessage;
}

+ (UIImage*)imageOfMapIcon;
{
    if (_imageOfMapIcon)
        return _imageOfMapIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [PCLocoMojo drawMapIcon];
    _imageOfMapIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMapIcon;
}

+ (UIImage*)imageOfAdd;
{
    if (_imageOfAdd)
        return _imageOfAdd;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [PCLocoMojo drawAdd];
    _imageOfAdd = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfAdd;
}

+ (UIImage*)imageOfAvatar;
{
    if (_imageOfAvatar)
        return _imageOfAvatar;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [PCLocoMojo drawAvatar];
    _imageOfAvatar = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfAvatar;
}

+ (UIImage*)imageOfSend;
{
    if (_imageOfSend)
        return _imageOfSend;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [PCLocoMojo drawSend];
    _imageOfSend = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSend;
}

#pragma mark Customization Infrastructure

- (void)setLoginDisabledTargets: (NSArray*)loginDisabledTargets
{
    _loginDisabledTargets = loginDisabledTargets;

    for (id target in self.loginDisabledTargets)
        [target setImage: PCLocoMojo.imageOfLoginDisabled];
}

- (void)setLoginNormalTargets: (NSArray*)loginNormalTargets
{
    _loginNormalTargets = loginNormalTargets;

    for (id target in self.loginNormalTargets)
        [target setImage: PCLocoMojo.imageOfLoginNormal];
}

- (void)setLoginTwitterTargets: (NSArray*)loginTwitterTargets
{
    _loginTwitterTargets = loginTwitterTargets;

    for (id target in self.loginTwitterTargets)
        [target setImage: PCLocoMojo.imageOfLoginTwitter];
}

- (void)setFacebookLoginTargets: (NSArray*)facebookLoginTargets
{
    _facebookLoginTargets = facebookLoginTargets;

    for (id target in self.facebookLoginTargets)
        [target setImage: PCLocoMojo.imageOfFacebookLogin];
}

- (void)setMessageTargets: (NSArray*)messageTargets
{
    _messageTargets = messageTargets;

    for (id target in self.messageTargets)
        [target setImage: PCLocoMojo.imageOfMessage];
}

- (void)setMapIconTargets: (NSArray*)mapIconTargets
{
    _mapIconTargets = mapIconTargets;

    for (id target in self.mapIconTargets)
        [target setImage: PCLocoMojo.imageOfMapIcon];
}

- (void)setAddTargets: (NSArray*)addTargets
{
    _addTargets = addTargets;

    for (id target in self.addTargets)
        [target setImage: PCLocoMojo.imageOfAdd];
}

- (void)setAvatarTargets: (NSArray*)avatarTargets
{
    _avatarTargets = avatarTargets;

    for (id target in self.avatarTargets)
        [target setImage: PCLocoMojo.imageOfAvatar];
}

- (void)setSendTargets: (NSArray*)sendTargets
{
    _sendTargets = sendTargets;

    for (id target in self.sendTargets)
        [target setImage: PCLocoMojo.imageOfSend];
}


@end



@interface PCGradient ()
{
    CGGradientRef _CGGradient;
}
@end

@implementation PCGradient

- (instancetype)initWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    self = super.init;
    if (self)
    {
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        NSMutableArray* cgColors = NSMutableArray.array;
        for (UIColor* color in colors)
            [cgColors addObject: (id)color.CGColor];

        _CGGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)cgColors, locations);
        CGColorSpaceRelease(colorSpace);
    }
    return self;
}

+ (instancetype)gradientWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    return [self.alloc initWithColors: colors locations: locations];
}

+ (instancetype)gradientWithStartingColor: (UIColor*)startingColor endingColor: (UIColor*)endingColor
{
    CGFloat locations[] = {0, 1};
    return [self.alloc initWithColors: @[startingColor, endingColor] locations: locations];
}

- (void)dealloc
{
    CGGradientRelease(_CGGradient);
}

@end
